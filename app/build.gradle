apply plugin: 'android'

ext.private = new Properties()
if (rootProject.file('private.properties').exists()) {
    ext.private.load(new FileInputStream(rootProject.file('private.properties')));
}

def getRevision = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    defaultConfig {
        applicationId "com.mapzen"
        minSdkVersion 8
        targetSdkVersion 19
    }

    dependencies {
        compile "org.osmdroid:osmdroid-android:4.1"
        compile 'org.slf4j:slf4j-android:1.7.7'
        compile(group: 'ch.acra', name: 'acra', version: '4.5.0') {
            exclude(group: 'org.json', module: 'json')
        }
        compile(group: 'oauth.signpost', name: 'signpost-commonshttp4', version: '1.2.1.2') {
            exclude(group: 'org.apache.httpcomponents', module: 'httpcore')
            exclude(group: 'org.apache.httpcomponents', module: 'httpclient')
        }

    }

    defaultConfig {
        versionCode 3
        versionName "0.6"

        buildConfigField "String", "OSM_SERVER_ADDRESS",
                project.ext.private.getProperty("default.OsmServerAddress",
                        "\"http://master.apis.dev.openstreetmap.org\"")
        buildConfigField "String", "OSM_CONSUMER_KEY",
                project.ext.private.getProperty("default.OsmConsumerKey",
                        "\"pCcgGqMCg91CDDbsbhLYQgLYAfV9IBUmFFMC1zZl\"")
        buildConfigField "String", "OSM_CONSUMER_SECRET",
                project.ext.private.getProperty("default.OsmConsumerSecret",
                "\"91kzSFar5whEjNzuIFNP1FPKK51Gr40E4pGbqcjm\"")
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "dbg-" + getRevision()
        }
        release {
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        beta {
            versionNameSuffix "b-" + getRevision()
            runProguard true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    lintOptions {
        disable 'MissingTranslation'
    }
}

['beta', 'release'].each { typeName ->
    def bt = android.buildTypes[typeName]
    bt.buildConfigField "String", "OSM_SERVER_ADDRESS",
            project.ext.private.getProperty("${typeName}.OsmServerAddress", "\"http://master.apis.dev.openstreetmap.org\"")
    bt.buildConfigField "String", "OSM_CONSUMER_KEY",
            project.ext.private.getProperty("${typeName}.OsmConsumerKey", "\"pCcgGqMCg91CDDbsbhLYQgLYAfV9IBUmFFMC1zZl\"")
    bt.buildConfigField "String", "OSM_CONSUMER_SECRET",
            project.ext.private.getProperty("${typeName}.OsmConsumerSecret", "\"91kzSFar5whEjNzuIFNP1FPKK51Gr40E4pGbqcjm\"")
}

if (ext.private.getProperty('release.StoreFile') != null) {
    android.signingConfigs.release.storeFile = file(ext.private['release.StoreFile'])
    android.signingConfigs.release.storePassword = ext.private['release.StorePassword']
    android.signingConfigs.release.keyAlias = ext.private['release.KeyAlias']
    android.signingConfigs.release.keyPassword = ext.private['release.KeyPassword']
} else {
    android.buildTypes.release.signingConfig = null
}
